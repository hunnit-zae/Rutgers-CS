# -*- coding: utf-8 -*-
"""Movie Recommendation System .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ClfkQ81KgSy_OHYhkW3ANDab25uU7q6e
"""

def read_ratings_data(f):
  
    l = []#lines in the file 

    mr_dict  = {}

    with open (f, "r") as file:
        l = file.readlines()
    file.close()
    

    for i in range(len(l)):
        temp = l[i][:-1].split("|")
        l[i] = [temp[0], float(temp[1])]

    for i in l:
       
        if i[0] not in mr_dict:
            mr_dict [i[0]] = []
        
     
        mr_dict [i[0]].append(i[1])

    return mr_dict 
read_ratings_data("/content/Ratings.txt")

def read_movie_genre(f):
   
    mg_dict = {}
    
   
    with open (f, "r") as file:
        l = file.readlines()
    file.close()
  
    for i in range(len(l)):
        l[i] = l[i][:-1].split("|")

    for i in l:
        mg_dict[i[2]] = i[0]
        

    return mg_dict


read_movie_genre("Movies.txt")

def create_genre_dict(f):

    l = []
    
    mg_dict = {}
    
    with open (f, "r") as file:
        l = file.readlines()
    file.close()
    for i in range(len(l)):
        temp = l[i][:-1].split("|")
        l[i] = [temp[0], temp[2]]
     
    for i in l:
        if i[0] not in mg_dict:
            mg_dict [i[0]] = []
        
        mg_dict [i[0]].append(i[1])
    
    return mg_dict 



create_genre_dict("Movies.txt")

def  calculate_average_rating(f):
  
    l = []#lines in the file 

    mr_dict  = {}


    with open (f, "r") as file:
        l = file.readlines()
    file.close()
    
    #from the each line removing '\n' symbol
    #also converting the text of the each line
    #into a list of movie name and rating
    for i in range(len(l)):
        temp = l[i][:-1].split("|")
        l[i] = [temp[0], float(temp[1])]
        
    #iterating in each line and storing the data
    #into the dictionary
    for i in l:
        #if a new movie name encountered
        #creating the empty list for that key
        sum=0
        emp=[]
        if i[0] not in mr_dict:
            mr_dict [i[0]] = []
            
            emp.append(i[1])

        
        #appending the rating in the key 
       
        mr_dict [i[0]].append(i[1])

    
    #returning the final dictionary
    return mr_dict 

calculate_average_rating("/content/Ratings.txt")

import pandas as pd
import numpy as np
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt
import seaborn as sns
movies = pd.read_csv("movies.csv")
ratings = pd.read_csv("rating.csv")


movies.head()

ratings.head()

final_dataset = ratings.pivot(index='movieId',columns='userId',values='rating')
final_dataset.head()
final_dataset.fillna(0,inplace=True)
final_dataset.head()

no_user_voted = ratings.groupby('movieId')['rating'].agg('count')
no_movies_voted = ratings.groupby('userId')['rating'].agg('count')

final_dataset=final_dataset.loc[:,no_movies_voted[no_movies_voted > 50].index]
final_dataset

csr_data = csr_matrix(final_dataset.values)
final_dataset.reset_index(inplace=True)
knn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=20, n_jobs=-1)
knn.fit(csr_data)
def get_movie_recommendation(movie_name):
    n_movies_to_reccomend = 10
    movie_list = movies[movies['title'].str.contains(movie_name)]  
    if len(movie_list):        
        movie_idx= movie_list.iloc[0]['movieId']
        movie_idx = final_dataset[final_dataset['movieId'] == movie_idx].index[0]
        distances , indices = knn.kneighbors(csr_data[movie_idx],n_neighbors=n_movies_to_reccomend+1)    
        rec_movie_indices = sorted(list(zip(indices.squeeze().tolist(),distances.squeeze().tolist())),key=lambda x: x[1])[:0:-1]
        recommend_frame = []
        for val in rec_movie_indices:
            movie_idx = final_dataset.iloc[val[0]]['movieId']
            idx = movies[movies['movieId'] == movie_idx].index
            recommend_frame.append({'Title':movies.iloc[idx]['title'].values[0],'Distance':val[1]})
        df = pd.DataFrame(recommend_frame,index=range(1,n_movies_to_reccomend+1))
        return df
    else:
        return "No movies found. Please check your input"